sudo: false

language: rust

cache:
    directories:
    - $HOME/.ccache

matrix:
  include:
  - name: Stable
    rust: stable
    env: PROTOBUF_VERSION=3.6.1
  - name: Beta
    rust: beta
    env: PROTOBUF_VERSION=3.6.1
  - name: Nightly
    rust: nightly
    env: PROTOBUF_VERSION=3.6.1
  - name: Stable bytes
    rust: stable
    env: PROTOBUF_VERSION=3.6.1 RUST_PROTOBUF_FEATURES=with-bytes
  - name: Stable serde
    rust: stable
    env: PROTOBUF_VERSION=3.6.1 RUST_PROTOBUF_FEATURES=with-serde
  - name: Nightly all features
    rust: nightly
    env: PROTOBUF_VERSION=3.6.1 RUST_PROTOBUF_FEATURES=with-serde,with-bytes
  - name: Windows
    os: windows
    rust: stable
    env: PROTOBUF_VERSION=3.6.1 ON_WINDOWS=1
  allow_failures:
  - os: windows

before_install:
  - ci/env-debug.sh
  - if [ -z "$ON_WINDOWS" ]; then ccache --zero-stats; fi
  - ci/install-protobuf.sh
  - if [ -z "$ON_WINDOWS" ]; then ccache --show-stats; fi
  - export PATH="$HOME/bin:$PATH"
  - export LD_LIBRARY_PATH="$HOME/lib"
  - which protoc
  - protoc --version
  - if [ -z "$ON_WINDOWS" ]; then PKG_CONFIG_PATH="/home/travis/lib/pkgconfig" interop/cxx/compile.sh; fi
  - export RUST_BACKTRACE=1

script:
  - protobuf/regenerate.sh
  - cargo test --all
  # `cargo test --all --features=FFF` doesn't work if there are crates without feature `FFF`
  # hence the explicit list of tests
  - protobuf-test/test.sh
  - protobuf-codegen-pure-test/test.sh
  - protoc/test.sh
  - cargo build --all --all-targets

notifications:
  email:
    on_success: never

# vim: set ts=2 sw=2 et:
